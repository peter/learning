#!/usr/bin/env python

import sys
import json
import argparse
import copy
import re
from functools import reduce
from collections import defaultdict

def arg_parser():
    parser = argparse.ArgumentParser(
        description='Describe structure of JSON document')
    parser.add_argument('--levels', type=int, default=2, help='Number of levels')
    return parser

args = arg_parser().parse_args()

JSON_TYPES = ['object', 'array', 'null', 'string', 'boolean', 'number']

def data_type(value):
    if value is None:
        return 'null'
    elif isinstance(value, str):
        return 'string'
    elif isinstance(value, bool):
        return 'boolean'
    elif isinstance(value, int) or isinstance(value, float):
        return 'number'
    elif isinstance(value, list):
        return 'array'
    elif isinstance(value, dict):
        return 'object'
    else:
        return 'unknown'

def describe(data, level, desc):
    if level > desc['levels_max']:
        desc['levels_max'] = level
    def build_description(d, key):
        value = d[key]
        if isinstance(value, dict) and level < desc['levels_limit']:
            d[key] = describe(value, level + 1, desc)
        elif isinstance(value, list) and level < desc['levels_limit']:
            d[key] = describe(value, level + 1, desc)
        else:
            key_type = data_type(d[key])
            desc['counts'][key_type] += 1
            d[key] = key_type
        return d
    result = copy.deepcopy(data)
    if isinstance(data, dict):
        desc['counts']['object'] += 1
        return reduce(build_description, result.keys(), result)
    elif isinstance(data, list) and len(data) > 0 and level < desc['levels_limit']:
        desc['counts']['array'] += 1
        if len(data) > desc['max_array_length']:
            desc['max_array_length'] = len(data)
        return [describe(data[0], level + 1, desc)]
    else:
        dtype = data_type(data)
        desc['counts'][dtype] += 1
        if dtype == 'array' and len(data) > desc['max_array_length']:
            desc['max_array_length'] = len(data)
        return dtype

def pretty_json(value):
  return json.dumps(value, indent=4, sort_keys=True)

def print_desc_header(desc):
    print('size: %s kb' % desc['size'])
    print('nesting levels: %s' % desc['levels_max'])
    print('max array length: %s\n' % desc['max_array_length'])
    print('Type counts:')
    for json_type in JSON_TYPES:
        print('%s: %s' % (json_type, desc['counts'][json_type]))
    print('')

json_data = sys.stdin.read()
desc = {
    'size': round(len(json_data)/1000.0),
    'levels_max': 1,
    'levels_limit': 10000,
    'counts': defaultdict(lambda: 0),
    'max_array_length': 0
}
data = json.loads(json_data)

result = describe(data, 1, desc)
print_desc_header(desc)

desc['levels_limit'] = args.levels
result_with_limit = describe(data, 1, desc)
print('Schema in first %s levels:' % (args.levels))
print(pretty_json(result_with_limit))
